name: 'Deploy image to ECS'
on:
  workflow_call:
    inputs:
      name:
        description: 'Name'
        required: true
        type: string
      type:
        description: 'Type'
        default: 'service'
        type: string
      repository:
        description: 'ECR Repository'
        required: true
        type: string
    secrets:
      aws-role:
        required: true

permissions:
  checks: read
  id-token: write

jobs:
  deploy-release-to-production:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Wait on CI
        uses: lewagon/wait-on-check-action@master
        with:
          ref: ${{ github.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allowed-conclusions: success
          check-name: build / build-php
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.aws-role }}
          role-duration-seconds: 3600
          role-session-name: DeployProduction
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
      - name: Download and update task definition
        shell: bash
        run: |
          EXEC_ROLE="arn:aws:iam::939614502044:role/ECS_Run_Task"
          aws ecs describe-task-definition --task-definition ${{ inputs.name }}-${{ inputs.type }} --query taskDefinition > raw-task-def.json

          jq 'del(
            .taskDefinitionArn,
            .requiresAttributes,
            .compatibilities,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          ) | .executionRoleArn = env.EXEC_ROLE' raw-task-def.json > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.name }}-${{ inputs.type }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.repository }}:${{ github.sha }}
      - name: Tag as live
        shell: bash
        env:
          ECR_REPOSITORY: ${{ inputs.repository }}
        run: |
          MANIFEST=$(aws ecr batch-get-image --repository-name ${{ inputs.repository }} --image-ids imageTag=$GITHUB_SHA --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name ${{ inputs.repository }} --image-tag live --image-manifest "$MANIFEST" || true
      - name: Create appspec.json
        shell: bash
        run: |
          echo "{\"version\": 0.0,\"Resources\": [{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"$TASK_DEF\",\"LoadBalancerInfo\":{\"ContainerName\":\"$CONTAINER_NAME\",\"ContainerPort\":80}}}}]}" > appspec.json
        env:
          TASK_DEF: ${{ steps.task-def.outputs.task-definition}}
          CONTAINER_NAME: ${{ inputs.name }}-${{ inputs.type }}
      - uses: actions/upload-artifact@v4
        with:
          name: appspec
          path: appspec.json
      - run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        shell: bash
      - run: echo "$TAG - $GITHUB_SHA By $GITHUB_ACTOR"
        shell: bash
      - name: Deploy Amazon ECS task definition
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.name }}-${{ inputs.type }}
          cluster: production-application
          codedeploy-appspec: appspec.json
          codedeploy-application: prod-app-${{ inputs.name }}
          codedeploy-deployment-group: prod-app-${{ inputs.name }}
          codedeploy-deployment-description: "${{ env.TAG }} - ${{ github.sha }} By ${{ github.actor }}"
          wait-for-service-stability: true

